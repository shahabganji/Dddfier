using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Dddifier;

[Generator]
public sealed class AggregateIdGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        _ = context.SyntaxProvider.CreateSyntaxProvider<string>(
            predicate: static (node, _) => Prediction(node),
            transform: static (syntaxContext, token) => string.Empty);

        context.RegisterPostInitializationOutput(GenerateWithIdAttribute);
    }

    private static bool Prediction(SyntaxNode node) =>
        node is ClassDeclarationSyntax { BaseList: not null } classDeclarationSyntax
        && classDeclarationSyntax.AttributeLists.Any();

    private static void GenerateWithIdAttribute(IncrementalGeneratorPostInitializationContext initializationContext)
    {
        initializationContext.AddSource("WithIdOfAttribute.g.cs",
            // lang=c#
            """
            // <auto-generated />
            
            namespace Dddfier.GeneratedCode.Attributes;
            
            public class WithIdOfAttribute<T> : global::System.Attribute
            {
                public string PropertyName { get; set; } = "Id";
                public global::Dddfier.GeneratedCode.SetterModifier SetterModifier { get; set; } = global::Dddfier.GeneratedCode.SetterModifier.Private;
            }
            """);

        initializationContext.AddSource("SetterModifierEnum.g.cs",
            //lang=c#
            """
            // <auto-generated />
            
            namespace Dddfier.GeneratedCode;
            
            public enum SetterModifier
            {
                Public,
                Private,
                Protected,
            }
            """);
    }
}


/*
//
//
// public sealed partial class CustomerId
// {
//     private readonly int _value;
//
//     private CustomerId(int id)
//     {
//         _value = id;
//     }
//
//     public static implicit operator int(CustomerId id) => id._value;
//     public static explicit operator CustomerId(int id) => new(id);
// }
//
// public partial class Customer
// {
//
//     public CustomerId CustomerId { get; private set; } = default!;
// }

*/
