<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net7.0</TargetFrameworks>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <LangVersion>latest</LangVersion>

        <NoWarn>$(NoWarn);NU5128</NoWarn>


        <!-- 👇 For being able to debug this by hitting F5 in the IDE -->
        <!-- RS1036: Specify analyzer banned API enforcement setting -->
        <!-- https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.Analyzers/Microsoft.CodeAnalysis.Analyzers.md#rs1036-specify-analyzer-banned-api-enforcement-setting -->
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>

    </PropertyGroup>

    <PropertyGroup>

        <IncludeSymbols>true</IncludeSymbols>

        <!-- 👇 For being able to debug this by hitting F5 in the IDE -->
        <!--
             - IsRoslyComponent helps to debug the source generator in Visual Studio or Rider. To debug it:
             - 1. Install the component ".NET compiler platform SDK"
             - 2. Set the this project as startup project
             - 3. Configure this project's debug launch profiles: Add an new "Roslyn Component" profile and set the Target Project to Ringana.Domain.PrimitiveValueObject.JsonNet.Console
        -->
        <IsRoslynComponent>true</IsRoslynComponent>
        
        <!-- 👇 We don't want to reference the source generator dll directly in consuming projects -->
        <IncludeBuildOutput>false</IncludeBuildOutput>
    </PropertyGroup>

    <PropertyGroup>
        <!--        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>-->
        <!--        <IncludeBuildOutput>false</IncludeBuildOutput>-->
        <Version>0.0.1</Version>
        <VersionSuffix>beta</VersionSuffix>
        <!--        <AssemblyVersion>$(Version).0</AssemblyVersion>-->
        <!--        <AssemblyFileVersion>$(Version).0</AssemblyFileVersion>-->
        <!--        <Authors>Shahab</Authors>-->

        <!--        <Description>Contains a C# Source Generator for generating DDD related code</Description>-->
    </PropertyGroup>


    <!-- 👇 This ensures the library will be packaged as a source generator when we use `dotnet pack` -->
    <ItemGroup>
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.6.0" />

        <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="8.0.0-preview1.23165.1">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

</Project>
