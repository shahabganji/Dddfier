using System.Reflection;
using System.Text;

namespace Dddfier;

internal static class EmbeddedResources
{
    private const string TemplatePath = "Dddfier.Templates.Sources";
    private static readonly Assembly ThisAssembly = typeof(EmbeddedResources).Assembly;

    internal static readonly string AutoGeneratedHeader;

    internal static readonly string WithIdOfAttribute;
    internal static readonly string SetterModifierEnum;

    static EmbeddedResources()
    {
        AutoGeneratedHeader = LoadEmbeddedResource($"{TemplatePath}.{nameof(AutoGeneratedHeader)}.cs");

        WithIdOfAttribute = LoadTemplateForEmitting(nameof(WithIdOfAttribute));
        SetterModifierEnum = LoadTemplateForEmitting(nameof(SetterModifierEnum));
    }

    private static string LoadEmbeddedResource(string resourceName)
    {
        var resourceStream = ThisAssembly.GetManifestResourceStream(resourceName);
        if (resourceStream is null)
        {
            var existingResources = ThisAssembly.GetManifestResourceNames();
            throw new ArgumentException(
                $"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);

        return reader.ReadToEnd();
    }

    private static string LoadTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"{TemplatePath}.{resourceName}.cs");
        return $"""
                {AutoGeneratedHeader}
                {resource}
                """;
//                @"#if STRONGLY_TYPED_ID_EMBED_ATTRIBUTES
//
// " + resource
//                    .Replace("public sealed", "internal sealed")
//                    .Replace("public enum", "internal enum")
//                + @"
// #endif";
    }
}
