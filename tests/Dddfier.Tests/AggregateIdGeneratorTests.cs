using FluentAssertions;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Dddfier.Tests;

public class AggregateIdGeneratorTests
{
    [Fact]
    public void WithIdOfAttribute_Is_Generated()
    {
        // Arrange
        var source = string.Empty;

        // Act
        var compilation = CSharpTestHelper.GetGeneratedOutput(source);

        // Assert
        compilation.Should().NotBeNull();
        var generatedCode = compilation!.SyntaxTrees.Single(st => st.FilePath.EndsWith("WithIdOfAttribute.g.cs"))
            .ToString();
        generatedCode.Should().Be(
            """
            // <auto-generated />

            namespace Dddfier.GeneratedCode.Attributes;

            public sealed class WithIdOfAttribute<T> : global::System.Attribute
            {
                public string PropertyName { get; set; } = "Id";
                public global::Dddfier.GeneratedCode.SetterModifier SetterModifier { get; set; } = global::Dddfier.GeneratedCode.SetterModifier.Private;
            }
            """
        );
    }

    [Fact]
    public void SetterModifier_Is_Generated()
    {
        // Arrange
        var source = string.Empty;

        // Act
        var compilation = CSharpTestHelper.GetGeneratedOutput(source);

        // Assert
        compilation.Should().NotBeNull();
        var generatedCode = compilation!.SyntaxTrees.Single(st => st.FilePath.EndsWith("SetterModifierEnum.g.cs"))
            .ToString();
        generatedCode.Should().Be(
            """
            // <auto-generated />
            
            namespace Dddfier.GeneratedCode;
            
            public enum SetterModifier
            {
                Public,
                Private,
                Protected,
            }
            """
        );
    }

    [Fact]
    public void Generated_Strong_Type_For_Guid()
    {
        // Arrange
        const string source = 
            """
            namespace SampleForTests;

            [Dddfier.GeneratedCode.Attributes.WithIdOf<Guid>]
            public sealed partial class Product { } 
            """;

        // Act
        var compilation = CSharpTestHelper.GetGeneratedOutput(source);

        // Assert
        compilation.Should().NotBeNull();

        var generatedCode = compilation!.SyntaxTrees.Single(st => st.FilePath.EndsWith("ProductId.g.cs")).ToString();
        const string expectedIdClass = 
            """
            // <auto-generated />

            #nullable enable

            using global::System;

            namespace SampleForTests;

            public readonly partial struct ProductId : IComparable<ProductId>, IEquatable<ProductId>
            {
                private readonly Guid _value;

                private ProductId(Guid value)
                {
                    _value = value;
                }

                public bool Equals(ProductId other) => this._value.Equals(other._value);
                public int CompareTo(ProductId other) => _value.CompareTo(other._value);

                public override bool Equals(object? obj)
                {
                    if (obj is null) return false;

                    return obj is ProductId other && Equals(other);
                }

                public override int GetHashCode() => _value.GetHashCode();
                public override string ToString() => _value.ToString();

                public static ProductId New() => new ProductId(Guid.NewGuid());

                public static bool operator ==(ProductId left, ProductId right) => left.Equals(right);
                public static bool operator !=(ProductId left, ProductId right) => !(left == right);

                public static implicit operator Guid(ProductId id) => id._value;
                public static explicit operator ProductId(Guid id) => new(id);
            }

            """;

        generatedCode.Should().Be(expectedIdClass);
    }
    
    
    [Fact]
    public void Generated_Property_For_Guid()
    {
        // Arrange
        const string source = 
            """
            namespace SampleForTests;

            [Dddfier.GeneratedCode.Attributes.WithIdOf<Guid>]
            public sealed partial class Product { } 
            """;

        // Act
        var compilation = CSharpTestHelper.GetGeneratedOutput(source);

        // Assert
        compilation.Should().NotBeNull();

        var generatedCode = compilation!.SyntaxTrees.Single(st => st.FilePath.EndsWith("Product.g.cs")).ToString();
        const string expectedIdClass = 
            """
            // <auto-generated />

            namespace SampleForTests;

            public partial class Product
            {
                public ProductId Id { get; private set; } = default!;
            }

            """;

        generatedCode.Should().Be(expectedIdClass);
    }
}
